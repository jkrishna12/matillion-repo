{"job":{"components":{"1717806":{"id":1717806,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":108,"y":2,"width":32,"height":32,"inputConnectorIDs":[1717807],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nimport requests\nimport json\n\n#animal list type of fact passed to api call; attribute_list used for elements to extract out of response body; #grid_list passed lists of response body elements - final grid_list assumes grid var\nanimal_list = ['cat','dog']\nattribute_list = ['text','createdAt','type']\ngrid_list = []\n\n#populate grid variable - 5 cat facts, 5 dog facts\nfor each in animal_list:\n\tr = requests.get('https://cat-fact.herokuapp.com/facts/random?animal_type='+str(each)+'&amount=5')\n\tfor x in range(5):\n\t\tresponse_list = [] \n\t\tfor attribute in attribute_list:\n\t\t\tresponse_list.append(r.json()[x][attribute])\n\t\tgrid_list.append(response_list)\n\t\tprint(str(each) + ' entry '+str(x+1)+ str(response_list))\n\ncontext.updateGridVariable('animalfacts', grid_list)\nprint ('\\n animal facts grid variable: ' + str(context.getGridVariable('animalfacts')))\n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"1717817":{"id":1717817,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[1717807],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"1717807":{"id":1717807,"sourceID":1717817,"targetID":1717806}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{"animalfacts":{"definition":{"name":"animalfacts","scope":"BRANCH","definitions":[{"name":"type","type":"TEXT"},{"name":"fact","type":"TEXT"},{"name":"id","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]},"capitals":{"definition":{"name":"capitals","scope":"TASKBATCH","definitions":[{"name":"countryName","type":"TEXT"},{"name":"capitalName","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[{"values":["USA","Washington D.C"]},{"values":["China","Beijing"]},{"values":["India","New Delhi"]}]}}},"info":{"name":"python4gridvars","description":null,"type":"ORCHESTRATION","tag":"8880a321-3487-4ae9-89ad-c8157bf09cdb"}}